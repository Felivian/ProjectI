function cartesianProduct(arr) {
  return arr.reduce(function(a, b) {
    return a.map(function(x) {
      return b.map(function(y) {
        return x.concat(y);
      })
    }).reduce(function(a, b) {
      return a.concat(b)
    }, [])
  }, [
    []
  ])
}

var A = cartesianProduct([
  ['d', 'h', 't'],
  ['d', 'h', 't'],
  ['d', 'h', 't'],
  ['d', 'h', 't'],
  ['d', 'h', 't']
]);
_.sortBy(A, function(arr) {
  return arr.sort();
});

var hash = {};
var out = [];
for (var i = 0; i < A.length; i++) {
  var key = A[i].join('');
  if (!hash[key]) {
    //out.push(A[i]);
    out.push(A[i]);
    hash[key] = 'found';
  }
}

function dups(arr) {
  var counts = {};
  arr.forEach(function(x) {
    counts[x] = (counts[x] || 0) + 1;
  });
  return counts;
}


var legit = _.reject(out, function(arr) {
	var result = {};
  result = dups(arr);
  return result.d > 2 || result.h > 2 || result.t > 2
});

var out2 = [];
for (var i = 0; i < legit.length; i++) {
  var key = legit[i].join('');
  out2.push(key);
}


console.log(out2);
